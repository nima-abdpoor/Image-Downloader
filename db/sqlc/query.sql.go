// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createImageResult = `-- name: CreateImageResult :one
INSERT INTO image_result (query_id,
                          image_url,
                          image_data)
values ($1, $2, $3) RETURNING id, query_id, image_url, image_data, timestamp
`

type CreateImageResultParams struct {
	QueryID   int64          `json:"query_id"`
	ImageUrl  sql.NullString `json:"image_url"`
	ImageData sql.NullString `json:"image_data"`
}

func (q *Queries) CreateImageResult(ctx context.Context, arg CreateImageResultParams) (ImageResult, error) {
	row := q.db.QueryRowContext(ctx, createImageResult, arg.QueryID, arg.ImageUrl, arg.ImageData)
	var i ImageResult
	err := row.Scan(
		&i.ID,
		&i.QueryID,
		&i.ImageUrl,
		&i.ImageData,
		&i.Timestamp,
	)
	return i, err
}

const createQuery = `-- name: CreateQuery :one
INSERT INTO query (query,
                   status,
                   per_page,
                   page)
values ($1, $2, $3, $4) RETURNING id, query, status, per_page, page, created_at, updated_at
`

type CreateQueryParams struct {
	Query   string `json:"query"`
	Status  string `json:"status"`
	PerPage int32  `json:"per_page"`
	Page    int32  `json:"page"`
}

func (q *Queries) CreateQuery(ctx context.Context, arg CreateQueryParams) (Query, error) {
	row := q.db.QueryRowContext(ctx, createQuery,
		arg.Query,
		arg.Status,
		arg.PerPage,
		arg.Page,
	)
	var i Query
	err := row.Scan(
		&i.ID,
		&i.Query,
		&i.Status,
		&i.PerPage,
		&i.Page,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQueryByStatus = `-- name: GetQueryByStatus :many
SELECT id, query, status, per_page, page, created_at, updated_at
FROM query
WHERE status = $1
`

func (q *Queries) GetQueryByStatus(ctx context.Context, status string) ([]Query, error) {
	rows, err := q.db.QueryContext(ctx, getQueryByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Query
	for rows.Next() {
		var i Query
		if err := rows.Scan(
			&i.ID,
			&i.Query,
			&i.Status,
			&i.PerPage,
			&i.Page,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuery = `-- name: UpdateQuery :one
UPDATE query
set status = $2, updated_at = $3
WHERE id = $1 RETURNING id, query, status, per_page, page, created_at, updated_at
`

type UpdateQueryParams struct {
	ID        int64        `json:"id"`
	Status    string       `json:"status"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdateQuery(ctx context.Context, arg UpdateQueryParams) (Query, error) {
	row := q.db.QueryRowContext(ctx, updateQuery, arg.ID, arg.Status, arg.UpdatedAt)
	var i Query
	err := row.Scan(
		&i.ID,
		&i.Query,
		&i.Status,
		&i.PerPage,
		&i.Page,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
